pipeline {
    agent {
        label 'AGENT-1'
    }
    options{
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
     parameters {
        choice(name: 'ACTION', choices: ['apply','destroy'], description: 'Select Action')
                }
    stages {
        stage('Init and Plan'){
            steps{
                withAWS(region: 'us-east-1', credentials:'aws-creds'){
                    sh """
                        cd 00-vpc
                        terraform init -reconfigure 
                        terraform plan -out=tfplan
                    """
            }
        }
        }
       
        stage('Apply or Deploy'){
            steps{
                withAWS(region: 'us-east-1', credentials:'aws-creds'){
                    sh """
                        cd 00-vpc
                        if [ ${params.ACTION} == 'apply' ]
                        then
                            terraform apply -auto-approve tfplan
                        elif [ ${params.ACTION} == 'destroy' ]
                        then 
                            terraform destroy -auto-approve tfplan
                        fi
                    """
            }
         }
        }
        stage('Print Params'){
            steps{
                echo "Hello ${params.PERSON}"
                echo "Biography: ${params.BIOGRAPHY}"
                echo "Toggle: ${params.TOGGLE}"
                echo "Choice: ${params.CHOICE}"
                echo "Password: ${params.PASSWORD}"  
            }
        }
    }
    post {
     always{
        echo "This section runs always"
        deleteDir() 
     }
     success{
        echo "This section runs when pipleline success"
     }
     failure{
        echo "This section runs when pipleline failure"
     }
    }
}

